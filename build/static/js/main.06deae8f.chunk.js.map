{"version":3,"sources":["serviceWorker.js","components/header/header.component.jsx","utils/fetch.data.js","redux/users/user.actions.js","components/common/loader/loader.component.jsx","components/user-list/user-list.component.jsx","components/user-address/user-address.component.jsx","App.js","redux/users/user.sagas.js","redux/users/user.reducer.js","redux/root-reducer.js","redux/store.js","index.js"],"names":["Boolean","window","location","hostname","match","Header","className","fetchUsers","a","fetch","response","json","fetchUsersSuccess","users","type","payload","fetchUsersFailure","errorMessage","Loader","UserList","props","fetchUsersStart","this","userData","isLoading","currentUser","setCurrentUser","role","scope","Object","keys","map","id","user","key","email","onClick","name","age","phone","React","Component","connect","state","usersData","dispatch","address","length","add","index","zipcode","street","suite","city","userList","fetchUsersAsync","error","put","message","takeEvery","INITIAL_STATE","undefined","userReducer","action","combineReducers","sagaMiddleware","createSagaMiddleware","middlewares","logger","store","createStore","rootReducer","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.06deae8f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\nimport './header.styles.css';\n\n\nconst Header = () => {\n    return (\n        <nav className=\"navbar navbar-light bg-light\">  \n            <div className=\"container\">\n                <span className=\"navbar-brand mb-0 h1\">Conviva</span>\n            </div>\n        </nav>\n    );\n};\n\nexport default Header;\n","export const fetchUsers = async () => {\n    const response = await fetch('https://conviva-3ffbc.firebaseio.com/users.json');\n    return await response.json();\n}\n\nexport const normalizeData = (data) => {\n    return data.reduce( (acc, user) => {\n        acc[user.id] = user;\n        return acc;\n    }, {});\n}\n","export const setCurrentUser = (user) => ({\n    type: 'SET_CURRENT_USER',\n    payload: user\n});\n\nexport const updateUsersList = (users) => ({\n    type: 'UPDATE_USER_LIST',\n    payload: users\n});\n\nexport const fetchUsersStart = () => ({\n    type: 'FETCH_USERS_START',\n});\n\nexport const fetchUsersSuccess = users => ({\n    type: 'FETCH_USERS_SUCCESS',\n    payload: users\n});\n\nexport const fetchUsersFailure = errorMessage => ({\n    type: 'FETCH_USERS_FAILURE',\n    payload: errorMessage\n});\n","import React from 'react';\nimport './loader.styles.css';\n\nconst Loader = () => {\n    return (\n        <div className=\"lds-default\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\n    )\n};\nexport default Loader;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { fetchUsers } from '../../utils/fetch.data';\n\nimport { setCurrentUser, updateUsersList, fetchUsersStart } from '../../redux/users/user.actions';\n\nimport Loader from '../common/loader/loader.component';\n\nimport './user-list.styles.css';\n\nclass UserList extends React.Component {\n    constructor(props) {\n        super(props);\n        // this.state = {\n        //     isLoading: true \n        // }\n    }\n    async componentDidMount() {\n        const { fetchUsersStart } = this.props;\n        fetchUsersStart();\n        // const data = await fetchUsers();\n        // updateUsersList(data);\n        // this.setState({\n        //     isLoading: false \n        // });\n    }\n    render() {\n        const { users, isLoading, errorMessage, currentUser } = this.props.userData;\n        const { setCurrentUser } = this.props;\n        return isLoading ? (\n            <Loader />\n        ) : (\n            <div className=\"user-list\">\n                <div className=\"text-left\">\n                    <h4>Customer List</h4>\n                </div>\n                {\n                    errorMessage ? (\n                        <div className=\"alert alert-danger\" role=\"alert\">\n                            {errorMessage}\n                        </div>\n                    ) : ( \n                        <table className=\"table\">\n                            <thead className=\"thead-dark\">\n                                <tr>\n                                    <th scope=\"col\">Id</th>\n                                    <th scope=\"col\">Name</th>\n                                    <th scope=\"col\">Age</th>\n                                    <th scope=\"col\">phone</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    Object.keys(users).map(id => {\n                                        const user = users[id];\n                                        return (\n                                            <tr className={currentUser.id === user.id ? 'active' : ''} \n                                                key={user.email} onClick={ () => setCurrentUser(user)}>\n                                                <td>{user.id}</td>\n                                                <td>{user.name}</td>\n                                                <td>{user.age}</td>\n                                                <td>{user.phone}</td>\n                                            </tr>\n                                        );\n                                    })\n                                }\n                            </tbody>\n                        </table>\n                    )\n                }\n            </div>\n        )\n    }\n};\n\nconst mapStateToProps = (state) => ({\n    userData: state.usersData,\n})\nconst mapDispatchToProps = dispatch => ({\n    setCurrentUser: user => dispatch(setCurrentUser(user)),\n    fetchUsersStart: () => dispatch(fetchUsersStart())\n})\n//    updateUsersList: users => dispatch(updateUsersList(users)),\nexport default connect(mapStateToProps, mapDispatchToProps)(UserList);\n","import React from 'react';\nimport './user-address.styles.css';\nimport { connect } from 'react-redux';\n\nconst UserAddress = ({ user }) => (\n    <div>\n        <div className=\"text-left\">\n            <h4>Customer Address</h4>\n        </div>\n        {\n            user && user.address && user.address.length !== 0 ? \n            (\n                user.address.map( (add, index) => {\n                    return (\n                        <div className=\"card border-secondary mb-3\" key={add.zipcode}>\n                            <div className=\"card-header\">Address {index + 1}</div>\n                            <div className=\"card-body text-secondary\">\n                                <table className=\"table table-sm table-borderless\">\n                                    <tbody className=\"text-left\">\n                                        <tr>\n                                            <td><strong>Street:</strong></td>\n                                            <td>{add.street}</td>\n                                        </tr>\n                                        <tr>\n                                            <td><strong>Suite:</strong></td>\n                                            <td>{add.suite}</td>\n                                        </tr>\n                                        <tr>\n                                            <td><strong>City:</strong></td>\n                                            <td>{add.city}</td>\n                                        </tr>\n                                        <tr>\n                                            <td><strong>Zipcode:</strong></td>\n                                            <td>{add.zipcode}</td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    );\n                })\n            ): user && user.address && user.address.length === 0 ? (\n                <div className=\"mt-5 no-data\">\n                    <p><strong>No contact address</strong></p>\n                </div>\n            ): (\n                <div className=\"mt-5 no-data\">\n                        <p><strong>click user to get details</strong></p>\n                </div>\n            )\n        }\n    </div>\n);\n\nconst mapStateToProps = (state) => ({\n    user: state.usersData.currentUser\n});\nexport default connect(mapStateToProps)(UserAddress);\n","import React from 'react';\nimport './App.css';\nimport Header from './components/header/header.component';\nimport UserList from './components/user-list/user-list.component';\nimport UserAddress from './components/user-address/user-address.component';\nimport { connect } from 'react-redux';\n\nconst App = () => {\n        return (\n            <div className=\"App\">\n                <Header/>\n                <div className=\"container\">\n                    <div className=\"row pt-3\">\n                        <h3 className=\"text-center w-100\">Customer Details</h3>\n                    </div>\n                    <div className=\"row py-3\">\n                        <div className=\"col-md-7\">\n                            <UserList/>\n                        </div>\n                        <div className=\"col-md-5\">\n                            <UserAddress />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    \n}\n\nconst mapStateToProps = (state) => ({\n    userList: state.usersData.users\n})\n\nexport default connect(mapStateToProps)(App);\n","import { takeEvery, put } from 'redux-saga/effects';\nimport { fetchUsers } from '../../utils/fetch.data';\nimport {\n    fetchUsersSuccess,\n    fetchUsersFailure\n} from './user.actions';\n\nexport function* fetchUsersAsync() {\n    try {\n        const users = yield fetchUsers();\n        if (users.error) {\n            yield put(fetchUsersFailure(users.error));\n        } else {\n            yield put(fetchUsersSuccess(users));\n        }\n    } catch(error) {\n        yield put(fetchUsersFailure(error.message));\n    }\n}\nexport function* fetchUsersStart() {\n    yield takeEvery(\n        'FETCH_USERS_START',\n        fetchUsersAsync\n    );\n}\n","const INITIAL_STATE = {\n    users: {},\n    currentUser: {},\n    isLoading: false,\n    errorMessage: undefined\n\n};\n\nconst userReducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case 'SET_CURRENT_USER':\n            return {\n                ...state,\n                currentUser: action.payload\n            }\n        case 'UPDATE_USER_LIST':\n            return {\n                ...state,\n                users: action.payload\n            }\n        case 'FETCH_USERS_START':\n            return {\n                ...state,\n                isLoading: true\n            }\n        case 'FETCH_USERS_SUCCESS':\n            return {\n                ...state,\n                isLoading: false,\n                users: action.payload\n            }\n        case 'FETCH_USERS_FAILURE':\n            return {\n                ...state,\n                isLoading: false,\n                errorMessage: action.payload\n            }\n        default:\n            return state;\n    }\n};\n\nexport default userReducer;\n","import { combineReducers } from 'redux';\n\nimport userReducer from './users/user.reducer.js';\n\nexport default combineReducers({\n    usersData: userReducer\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport { fetchUsersStart } from './users/user.sagas';\n\nimport rootReducer from './root-reducer';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware, logger];\n\nconst store = createStore(rootReducer, applyMiddleware(...middlewares));\n\nsagaMiddleware.run(fetchUsersStart);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';  \nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport store from './redux/store';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}